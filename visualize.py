# -*- coding: utf-8 -*-
"""Viz.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QNZnlOtjZFL5oksl4OEAjawTzdIhCjRq
"""

pip install pyspark

import pyspark
from pyspark.context import SparkContext
from pyspark.sql import SparkSession
from pyspark.sql.types import StructType
from pyspark.sql.functions import *
from pyspark.sql.types import *
from pyspark.ml.linalg import Vectors
from pyspark.ml.feature import *
from pyspark.ml.regression import *
from pyspark.ml.evaluation import *
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime
import seaborn as sns
from pyspark.sql.functions import to_timestamp
from pyspark.sql import functions as F
from scipy.interpolate import make_interp_spline

     
import matplotlib.pyplot as plt
import pandas as pd

import os

os.makedirs('visualize_imgs', exist_ok=True)
sns.set_theme()

spark = SparkSession.builder.appName("Vu dep trai").getOrCreate()
# conf = pyspark.SparkConf().setMaster("spark://node-master:7077")\
#         .setAppName("Vu dep trai")\
#         .set("spark.executor.memory","15g")
# # sc = SparkContext.getOrCreate(conf=conf)
# # spark.stop()
# sc = SparkContext(conf = conf)
# spark = SparkSession(sc)

TICKER = 'ACB'

df = spark.read.json(f'/content/drive/MyDrive/Smoll data /final_stock/{TICKER}.json',  multiLine=True)
df = df.withColumnRenamed('close', 'close_price')
df = df.withColumnRenamed('high', 'high_price')
df = df.withColumnRenamed('low', 'low_price')
df = df.withColumnRenamed('tradingDate', 'trading_date')
df = df.withColumnRenamed('open', 'open_price')
df = df.withColumnRenamed('ticker', 'ticker_name')

df = df.withColumn('trading_date', unix_timestamp(to_date(df['trading_date']), "yyyy-MM-dd").cast("timestamp"))
df.show(5)

"""### Histogram of high-low in day"""

df = df.withColumn('price_diff', ( df['high_price'] - df['low_price'] ))
df = df.toPandas()

fig, ax = plt.subplots(figsize=(16, 8))
ax.hist(df['price_diff'])
ax.set_title("Distribution of Maximum day price difference")
ax.set_xlabel("Price difference")
ax.set_ylabel("Frequency")
fig.savefig(f'visualize_imgs/price_diff_hist_{TICKER}.png')

fig, ax = plt.subplots(figsize=(16, 8))
ax.boxplot(df['price_diff'])
ax.set_title("Boxplot of Maximum day price difference")
ax.set_xlabel("Price difference")
ax.set_ylabel("Frequency")
fig.savefig(f'visualize_imgs/price_diff_boxplot_{TICKER}.png')

# plt.plot(df.loc[df['ticker'] == 'MBS', 'tradingDate'], df.loc[df['ticker'] == 'MBS', 'open'])
fig, ax = plt.subplots(figsize=(16, 8))
ax.plot(df['trading_date'], df['open_price'])
ax.set_title("Trend of open price")
ax.set_xlabel("Time")
ax.set_ylabel("Open price")
fig.savefig(f'visualize_imgs/open_price_ts_{TICKER}.png')

"""### 2008 financial crisis

Only take stocks that we do have data in this period
"""

crisis_df = df[(df['trading_date'] > '2007-8-1') & (df['trading_date'] < '2008-12-31')]
if len(crisis_df) > 0:
  fig, ax = plt.subplots(figsize=(16, 8))
  ax.plot(crisis_df['trading_date'], crisis_df['open_price'])
  ax.set_title("Open price during 2008 Financial Crisis")
  ax.set_xlabel("Time")
  ax.set_ylabel("Open price")
  fig.savefig(f'visualize_imgs/2008_crisis_{TICKER}.png')

"""### COVID pandemic"""

covid_df = df[(df['trading_date'] > '2020-1-1') & (df['trading_date'] < '2021-6-30')]
if len(covid_df) > 0:
  fig, ax = plt.subplots(figsize=(16,8))
  ax.plot(covid_df['trading_date'], covid_df['open_price'])
  ax.set_title("Open price during COVID pandemic")
  ax.set_xlabel("Time")
  ax.set_ylabel("Open price")
  fig.savefig(f'visualize_imgs/covid_{TICKER}.png')

from scipy.signal import savgol_filter
plt.figure(figsize=(16,8))

# Dataset
x = df['trading_date']
y = df['price_diff']
y = savgol_filter(y, 31, 3)
 
# Plotting the Graph
fig, ax = plt.subplots(figsize=(16,8))
ax.plot(x, y)
ax.set_title("Maximum day price difference over time (smoothed using Savgol filter)")
ax.set_xlabel("Time")
ax.set_ylabel("Price difference")
fig.savefig(f'visualize_imgs/price_diff_smoothed_{TICKER}.png')

"""### Seasonality"""

# #only first 5000 values are taken because it was looking very crowded
# from statsmodels.tsa.seasonal import seasonal_decompose

# plt.figure(figsize=(16,8))
# result = seasonal_decompose(df['close_price'].head(5000), model='additive', period = 30)
# result.plot()  
# plt.show()
# plt.savefig(f'visualize_imgs/seasonality_{TICKER}.png')

# plt.figure(figsize=(16,8))
# money_flow_volume = ((df['close_price'] - df['low_price']) - (df['high_price'] - df['close_price'])) / (df['high_price'] - df['low_price']) * df['volume']
# money_flow_volume = money_flow_volume.tolist()
# acc_dist = [0]
# for i in range(len(money_flow_volume)):
#   try:
#     acc_dist.append(acc_dist[i-1] + money_flow_volume[i])
#   except:
#     pass
# acc_dist = acc_dist[:-1]
# df['accumulation_distribution'] = acc_dist
# plt.plot(df['trading_date'], df['accumulation_distribution'])

df['returns'] = df['close_price'].pct_change(1)
df['CumulativeReturn'] = (1+df['returns']).cumprod()
df['MA20'] = df['close_price'].rolling(20).mean()
df['STD20'] = df['close_price'].rolling(20).std()
df['MA150'] = df['close_price'].rolling(150).mean()

fig, ax = plt.subplots(figsize=(16,10))
ax.hist(df['returns'], density=True, bins=200)
ax.set_title("Distribution of Returns")
ax.set_xlabel("Returns")
ax.set_ylabel("Frequency")
ax.set_xlim(-0.10, 0.10)
fig.savefig(f'visualize_imgs/return_dist_{TICKER}.png')

"""### Closing price with 20 days SMA and 150 days SMA"""

trading_days = df['trading_date']
fig, ax = plt.subplots(figsize=(16,10))
ax.plot(trading_days, df['close_price'],label="Closing Price", color="#3498db")
ax.plot(trading_days, df['MA20'], label="20 Days SMA", color="#e67e22")
ax.plot(trading_days, df['MA150'], label="150 Days SMA", color="#95a5a6")
ax.set_title("Stock Prices with Indicators", fontsize="14", fontweight="semibold")
ax.set_xlim([trading_days.min(), trading_days.max()])
plt.legend()

volplot = ax.twinx()
volplot.set_ylim([0,df['volume'].max()*3])
volplot.plot(trading_days, df[["volume"]], color="#2ecc71", label="volume traded", alpha=0.5)
volplot.grid(False)
plt.legend();
fig.savefig(f'visualize_imgs/price_with_indicator_{TICKER}.png')

"""### Bollinger band"""

#Bollinger Bands
df['lower_band'] = df['MA20'] - 2*df['STD20']
df['upper_band'] = df['MA20'] + 2*df['STD20']

fig, ax = plt.subplots(figsize=(16,10))
ax.plot(trading_days, df['close_price'],label="Closing Price", color="#3498db")
ax.fill_between(trading_days, df['upper_band'], df['lower_band'], color='#e67e22', alpha=0.6, label="Bollinger Band")
ax.set_title('Stock Prices with Bollinger Bands')
ax.set_xlim(trading_days.min(), trading_days.max())
plt.legend();
plt.savefig(f'visualize_imgs/bollinger_bands_{TICKER}.png')

